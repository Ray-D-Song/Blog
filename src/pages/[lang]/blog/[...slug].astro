---
import { getCollection } from 'astro:content';
import Layout from '../../../layouts/Layout.astro'
// @ts-ignore
import rt from 'reading-time/lib/reading-time'

export async function getStaticPaths() {
  const blogs = await getCollection('blog');
  return blogs.map(blog => {
    const [lang, ...slug] = blog.slug.split('/')
    return {
      params: { lang, slug: slug.join('/') },
      props: { blog },
    }
  })
}
const { blog } = Astro.props
const {lang} = Astro.params
const { Content } = await blog.render()
const readingTime = Math.ceil(rt(blog.body).minutes)
const coverVisible = blog.data.cover.length > 0
const remark = blog.data.remark
---
<Layout title={blog.data.title} lang={lang} desc={blog.body.slice(0, 100)}>
  <main class="w-full flex flex-col items-center">
    <div class="w-85% 2xl:w-40% xl:w-50% lg:w-60% md:w-75% flex flex-col items-center">
      {
        coverVisible && (
          <div class="w-full h-40 xl:h-100 lg:h-80 md:h-70 sm:h-50 rounded-lg overflow-hidden relative">
            <img
              src={blog.data.cover}
              class="w-full h-full object-cover absolute top-0 left-0"
            />
            <span class="absolute z-30 bottom-1 right-2 text-12px">{remark ?? ''}</span>
          </div>
        )
      }
      <h1 class={`text-3xl font-600 mt-5 mb-2 text-center`}>{blog.data.title}</h1>
      <div class="mb-10">
        <span class="text-sm text-gray-5">{blog.data.date}</span>
        <span class="text-sm text-gray-5"> â€¢ </span>
        <span class="text-sm text-gray-5">{readingTime}min</span>
      </div>
      <article class={`prose w-full`}>
        <Content />
      </article>
      <div id="tcomment"></div>
      <script is:inline>
        const lang = location.pathname.split('/').pop()
        twikoo.init({
          envId: 'https://twikoo-cloudflare.songraysmail.workers.dev',
          el: '#tcomment',
          lang,
        })
      </script>
    </div>
  </main>
</Layout>

<script>
import setupCopy from '../../../utils/copy'
import setupMermaid from '../../../utils/mermaid'
import setupLineNum from '../../../utils/lineNum'

const codeBlocks = document.querySelectorAll('.astro-code')

codeBlocks.forEach((block) => {
  if ((block as HTMLElement).dataset.language === 'mermaid') {
    setupMermaid(block as HTMLElement)
  } else {
    setupCopy(block as HTMLElement)
  }
})

codeBlocks.forEach((block) => {
  const codeTag = block.querySelector('code')
  if(codeTag) {
    setupLineNum(codeTag as HTMLElement)
  }
  if(codeTag?.lastChild)
    codeTag?.removeChild(codeTag.lastChild)
})
</script>

<style is:inline>
/* code style */
.astro-code {
  line-height: unset;
  word-break: break-all;
}
.line {
  width: 100%;
  white-space: pre-wrap;
}
.line-num {
  user-select: none;
}
.prose {
  max-width: 100% !important;
}
html.light .astro-code {
  background-color: #f6f8fa !important;
  border: 1px solid #d0d7de;
  border-radius: 6px;
}
</style>


<style is:inline>
.mermaid-con {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  padding: 20px 0 0 20px;
  background-color: white;
}

.twikoo {
  margin-top: 60px;
}
</style>

<style is:inline>
.link-preview {
  margin: 0 auto;
  width: 70% !important;
  --link-preview-corners: 0.5em;
  --link-preview-padding-inline: 0.75rem;
  font-family: sans-serif;
}
html.light .link-preview {
  background-color: #F7F7F8;
  color: darkblue;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
}
html.dark .link-preview {
  background-color: #1E2A5E;
  color: #CDC2A5;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
}
html.dark .link-preview a {
  color: #E1D7C6;
  text-decoration: none;
}

html.dark .link-preview img {
  opacity: 90%;
}


html.light .prose {
  --un-prose-headings: #24292f;
}

.prose {
  --un-prose-links: #0969da;
  h1, h2, h3 {
    font-weight: 600;
    margin-top: 2em;
    margin-bottom: 1em;
  }
  
  p {
    line-height: 1.75;
    margin: 1.25em 0;
  }
}

html.light .link-preview {
  background-color: #f6f8fa;
  border: 1px solid #d0d7de;
  box-shadow: 0 1px 3px rgba(0,0,0,0.1);
  color: #24292f;
}

blockquote {
  border-left: 4px solid #4D4E55 !important;
  background: #F3E2A3;
  padding-left: 1rem !important;
  margin-left: 0 !important;
  margin-right: 0 !important;
  margin-top: 1rem !important;
  margin-bottom: 1rem !important;
}

html.dark blockquote {
  border-left: 4px solid #4D4E55 !important;
  background: #212121;
}
</style>
