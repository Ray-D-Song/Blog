---
import { getCollection } from 'astro:content';
import Layout from '../../../layouts/Layout.astro'
// @ts-ignore
import rt from 'reading-time/lib/reading-time'

export async function getStaticPaths() {
  const blogs = await getCollection('blog');
  return blogs.map(blog => {
    const [lang, ...slug] = blog.slug.split('/')
    return {
      params: { lang, slug: slug.join('/') },
      props: { blog },
    }
  })
}
const { blog } = Astro.props
const { Content } = await blog.render()
const readingTime = Math.floor(rt(blog.body).minutes)
const coverVisible = blog.data.cover.length > 0
const remark = blog.data.remark
---
<Layout title={blog.data.title}>
  <main class="w-full flex flex-col items-center">
    <div class="w-85% 2xl:w-40% xl:w-50% lg:w-60% md:w-75% flex flex-col items-center">
      {
        coverVisible && (
          <div class="w-full rounded-lg h-100 overflow-hidden relative">
            <img
              src={blog.data.cover}
              class="w-full h-full object-cover absolute top-0 left-0"
            />
            <span class="absolute z-30 bottom-1 right-2 text-12px">{remark ?? ''}</span>
          </div>
        )
      }
      <h1 class="text-3xl font-600 mt-5 mb-2 text-center">{blog.data.title}</h1>
      <div class="mb-10">
        <span class="text-sm text-gray-5">{blog.data.date}</span>
        <span class="text-sm text-gray-5"> â€¢ </span>
        <span class="text-sm text-gray-5">{readingTime}min</span>
      </div>
      <article class="prose w-full font-450 dark:font-unset">
        <Content />
      </article>
    </div>
  </main>
</Layout>

<script>
import setupCopy from '../../../utils/copy'
import setupLineNum from '../../../utils/lineNum'

const codeBlocks = document.querySelectorAll('.astro-code')

codeBlocks.forEach((block) => setupCopy(block as HTMLElement))

codeBlocks.forEach((block) => {
  const codeTag = block.querySelector('code')
  if(codeTag) {
    setupLineNum(codeTag as HTMLElement)
  }
})
</script>

<style is:global>
.astro-code {
  line-height: unset;
  font-size: 0.9rem;
  word-break: break-all;
}
.line {
  width: 100%;
  white-space: pre-wrap;
}

blockquote {
  border-left: 4px solid #4D4E55 !important;
  background: #F3E2A3;
  padding-left: 1rem !important;
  margin-left: 0 !important;
  margin-right: 0 !important;
  margin-top: 1rem !important;
  margin-bottom: 1rem !important;
}

html.dark blockquote {
  border-left: 4px solid #4D4E55 !important;
  background: #212121;
}

article a {
  margin: 0 10px;
}

article code {
  margin: 0 5px;
}

.prose :where(:not(pre) > code):not(:where(.not-prose,.not-prose *))::before, .prose :where(:not(pre) > code):not(:where(.not-prose,.not-prose *))::after {
  content: '';
}

p > code {
  color: #575279 !important;
  font-weight: unset !important;
}

html.dark p > code {
  color: #7AA2F7 !important;
}
</style>
